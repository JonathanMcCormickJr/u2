searchState.loadedDescShard("bytes", 0, "Provides abstractions for working with bytes.\nDefines big-endian serialization.\n<code>ByteOrder</code> describes types that can serialize integers as …\nA reference counted contiguous slice of memory.\nA unique reference to a contiguous slice of memory.\nDefines little-endian serialization.\nShortens the buffer, dropping the first <code>cnt</code> bytes and …\nShortens the buffer, dropping the first <code>cnt</code> bytes and …\nUtilities for working with buffers.\nReturns the number of bytes the <code>BytesMut</code> can hold without …\nClears the buffer, removing all data.\nClears the buffer, removing all data.\nAppends given bytes to this object.\nAppends given bytes to this object.\nConverts <code>self</code> into an immutable <code>Bytes</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the given slice of IEEE754 single-precision (4 …\nConverts the given slice of IEEE754 double-precision (8 …\nConverts the given slice of signed 128 bit integers to a …\nConverts the given slice of signed 16 bit integers to a …\nConverts the given slice of signed 32 bit integers to a …\nConverts the given slice of signed 64 bit integers to a …\nConverts the given slice of unsigned 128 bit integers to a …\nConverts the given slice of unsigned 16 bit integers to a …\nConverts the given slice of unsigned 32 bit integers to a …\nConverts the given slice of unsigned 64 bit integers to a …\nCreates a new <code>Bytes</code> from a static slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns true if the <code>BytesMut</code> has a length of 0.\nReturns the number of bytes contained in this <code>Bytes</code>.\nReturns the number of bytes contained in this <code>BytesMut</code>.\nCreates a new empty <code>Bytes</code>.\nCreates a new <code>BytesMut</code> with default capacity.\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\nReads a signed 128 bit integer from <code>buf</code>.\nReads signed 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 16 bit integer from <code>buf</code>.\nReads signed 16 bit integers from <code>src</code> to <code>dst</code>.\nReads a signed 24 bit integer from <code>buf</code>, stored in i32.\nReads a signed 32 bit integer from <code>buf</code>.\nReads signed 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 48 bit integer from <code>buf</code>, stored in i64.\nReads a signed 64 bit integer from <code>buf</code>.\nReads signed 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed n-bytes integer from <code>buf</code>.\nReads a signed n-bytes integer from <code>buf</code>.\nReads an unsigned 128 bit integer from <code>buf</code>.\nReads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nReads an unsigned 16 bit integer from <code>buf</code>.\nReads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nReads an unsigned 24 bit integer from <code>buf</code>, stored in u32.\nReads an unsigned 32 bit integer from <code>buf</code>.\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads an unsigned 48 bit integer from <code>buf</code>, stored in u64.\nReads an unsigned 64 bit integer from <code>buf</code>.\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from <code>buf</code>.\nReserves capacity for at least <code>additional</code> more bytes to be …\nResizes the buffer so that <code>len</code> is equal to <code>new_len</code>.\nSets the length of the buffer.\nReturns a slice of self for the index range <code>[begin..end)</code>.\nReturns a slice of self for the index range …\nReturns a slice of self that is equivalent to the given …\nReturns a slice of self for the index range <code>[0..end)</code>.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the buffer into two at the given index.\nRemoves the bytes from the current view, returning them in …\nShortens the buffer, keeping the first <code>len</code> bytes and …\nShortens the buffer, keeping the first <code>len</code> bytes and …\nAttempts to convert into a <code>BytesMut</code> handle.\nCombine splitted BytesMut objects back as contiguous.\nCreates a new <code>Bytes</code> with the specified capacity.\nCreates a new <code>BytesMut</code> with the specified capacity.\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites IEEE754 double-precision (8 bytes) floating point …\nWrites a signed 128 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 16 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.\nWrites a signed 32 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.\nWrites a signed 64 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites signed 8 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned 128 bit integer <code>n</code> to <code>buf</code>.\nWrites unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 16 bit integer <code>n</code> to <code>buf</code>.\nWrites unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.\nWrites an unsigned 32 bit integer <code>n</code> to <code>buf</code>.\nWrites unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.\nWrites an unsigned 64 bit integer <code>n</code> to <code>buf</code>.\nWrites unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nRead bytes from a buffer.\nThe <code>Buf</code> type that <code>self</code> is being converted into\nA trait for values that provide sequential write access to …\nA <code>Chain</code> sequences two buffers.\nConversion from a <code>Buf</code>\nConversion into a <code>Buf</code>\nIterator over the bytes contained by the buffer.\nA <code>Buf</code> adapter which implements <code>io::Read</code> for the inner …\nA <code>Buf</code> adapter which limits the bytes read from an …\nA <code>BufMut</code> adapter which implements <code>io::Write</code> for the inner …\nAdvance the internal cursor of the Buf\nAdvance the internal cursor of the BufMut\nCreates a “by reference” adaptor for this instance of …\nCreates a “by reference” adaptor for this instance of …\nCreates a “by reference” adaptor for this instance of …\nCreates a “by reference” adaptor for this instance of …\nReturns a slice starting at the current position and of …\nReturns a mutable slice starting at the current BufMut …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nFills <code>dst</code> with potentially multiple mutable slices …\nFills <code>dst</code> with potentially multiple mutable slices …\nCreates an adaptor which will chain this buffer with …\nCreates an adaptor which will chain this buffer with …\nTransforms a <code>Buf</code> into a concrete buffer.\nTransforms a <code>Buf</code> into a concrete buffer.\nCopies bytes from <code>self</code> into <code>dst</code>.\nCopies bytes from <code>self</code> into <code>dst</code>.\nGets a mutable reference to the first underlying <code>Buf</code>.\nGets a reference to the first underlying <code>Buf</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a value from a buffer.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a mutable reference to the underlying <code>Buf</code>.\nGets a mutable reference to the underlying <code>BufMut</code>.\nGets a reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>Buf</code>.\nGets a reference to the underlying <code>BufMut</code>.\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nReturns true if there are any more bytes to consume\nReturns true if there are any more bytes to consume\nReturns true if there is space in <code>self</code> for more bytes.\nReturns true if there is space in <code>self</code> for more bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>Buf</code> from a value.\nConsumes this <code>Chain</code>, returning the underlying values.\nConsumes this <code>Iter</code>, returning the underlying value.\nConsumes this <code>Reader</code>, returning the underlying value.\nConsumes this <code>Take</code>, returning the underlying value.\nConsumes this <code>Writer</code>, returning the underlying value.\nReturns an iterator over the bytes contained by the buffer.\nReturns an iterator over the bytes contained by the buffer.\nGets a mutable reference to the last underlying <code>Buf</code>.\nGets a reference to the last underlying <code>Buf</code>.\nReturns the maximum number of bytes that can be read.\nCreates a new <code>Chain</code> sequencing the provided values.\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 single-precision (4 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites  an IEEE754 double-precision (8 bytes) floating …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 16 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in big-endian byte …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 32 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in the big-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 64 bit integer to <code>self</code> in little-endian …\nWrites a signed 8 bit integer to <code>self</code>.\nWrites a signed 8 bit integer to <code>self</code>.\nWrites a signed n-byte integer to <code>self</code> in big-endian byte …\nWrites a signed n-byte integer to <code>self</code> in big-endian byte …\nWrites a signed n-byte integer to <code>self</code> in little-endian …\nWrites a signed n-byte integer to <code>self</code> in little-endian …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nTransfer bytes into <code>self</code> from <code>src</code> and advance the cursor …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 16 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in big-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 32 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in the …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 64 bit integer to <code>self</code> in little-endian …\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned 8 bit integer to <code>self</code>.\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in big-endian …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nWrites an unsigned n-byte integer to <code>self</code> in the …\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns the number of bytes between the current position …\nReturns the number of bytes that can be written from the …\nSets the maximum number of bytes that can be read.\nCreates an adaptor which will read at most <code>limit</code> bytes …\nCreates an adaptor which will read at most <code>limit</code> bytes …\nCreates an adaptor which implements the <code>Write</code> trait for …\nCreates an adaptor which implements the <code>Write</code> trait for …")